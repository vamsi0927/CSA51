#include <stdio.h>

// Function to calculate gcd of two numbers
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// Function to find multiplicative inverse of e modulo φ(n)
int mod_inverse(int e, int phi_n) {
    int t = 0, new_t = 1;
    int r = phi_n, new_r = e;
    while (new_r != 0) {
        int quotient = r / new_r;
        t = new_t;
        new_t = t - quotient * new_t;
        r = new_r;
        new_r = r - quotient * new_r;
    }
    if (r > 1) return -1; // No inverse exists
    if (t < 0) t = t + phi_n;
    return t;
}

// Function to factor n (find p and q)
void factor_n(int n, int *p, int *q) {
    for (int i = 2; i * i <= n; i++) {
        if (n % i == 0) {
            *p = i;
            *q = n / i;
            return;
        }
    }
}

// Main program to find private key
int main() {
    int e = 31;  // Public exponent
    int n = 3599;  // Modulus
    
    int p, q;
    factor_n(n, &p, &q);  // Find p and q such that n = p * q

    int phi_n = (p - 1) * (q - 1);  // Euler's Totient function
    
    printf("p = %d, q = %d\n", p, q);
    printf("φ(n) = %d\n", phi_n);
    
    // Find the multiplicative inverse of e modulo φ(n)
    int d = mod_inverse(e, phi_n);

    if (d == -1) {
        printf("Multiplicative inverse doesn't exist\n");
    } else {
        printf("Private key d = %d\n", d);
    }

    return 0;
}
