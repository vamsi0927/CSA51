#include <stdio.h>
#include <stdint.h>
#include <string.h>

// Block size (in bits) and corresponding constant for CMAC
#define BLOCK_SIZE_64 64
#define BLOCK_SIZE_128 128
#define CMAC_CONST_128 0x87
#define CMAC_CONST_64 0x1B

// Left shift a block (in bits) and conditionally XOR with the constant
void left_shift_and_xor(uint8_t *block, int block_size, uint8_t constant) {
    uint8_t carry = 0;
    for (int i = block_size - 1; i >= 0; i--) {
        uint8_t next_carry = (block[i] & 0x80) >> 7;
        block[i] = (block[i] << 1) | carry;
        carry = next_carry;
    }

    // XOR with the constant if the left-most bit was 1
    if (carry) {
        block[block_size - 1] ^= constant;
    }
}

// Function to generate the first and second subkeys for CMAC
void generate_cmac_subkeys(uint8_t *subkey1, uint8_t *subkey2, int block_size) {
    uint8_t zero_block[16] = {0}; // Initialize a block of zeroes
    uint8_t constant;

    // Select constant based on block size
    if (block_size == BLOCK_SIZE_128) {
        constant = CMAC_CONST_128;
    } else if (block_size == BLOCK_SIZE_64) {
        constant = CMAC_CONST_64;
    } else {
        printf("Unsupported block size.\n");
        return;
    }

    // Compute the first subkey
    memcpy(subkey1, zero_block, sizeof(zero_block));  // Copy zero block to subkey1
    left_shift_and_xor(subkey1, block_size / 8, constant);

    // Compute the second subkey (left shift subkey1)
    memcpy(subkey2, subkey1, sizeof(zero_block));  // Copy subkey1 to subkey2
    left_shift_and_xor(subkey2, block_size / 8, constant);
}

void print_block(uint8_t *block, int size) {
    for (int i = 0; i < size; i++) {
        printf("%02X", block[i]);
    }
    printf("\n");
}

int main() {
    uint8_t subkey1[16] = {0}; // To hold the first subkey
    uint8_t subkey2[16] = {0}; // To hold the second subkey

    // Generate subkeys for 128-bit block size (change the block size as needed)
    generate_cmac_subkeys(subkey1, subkey2, BLOCK_SIZE_128);

    printf("Subkey 1: ");
    print_block(subkey1, BLOCK_SIZE_128 / 8);  // Print the 128-bit subkey

    printf("Subkey 2: ");
    print_block(subkey2, BLOCK_SIZE_128 / 8);  // Print the second 128-bit subkey

    return 0;
}
